Estrutura - Funções

Variáveis criadas dentro de uma funçao apenas podem ser utilizadas dentro dela.

function nome(parametros) {
  // instruções
}


Quando invocamos o "return", a função para de ser executada.

function nome(parametros){
  // instruções
  return; //valor de retorno
}


Função anônima

Funções que representam expressões.
Uma variável pode armazenar uma função.

const soma = function (a, b) {
  return a + b;
}

soma(1, 2) // 3
soma(5, 4) // 9

Função autoinvocável(IIFE - Immediately Invoked Function Expression)

Uma função anônima entre parênteses, seguida por outro par de parênteses, que representa sua chamada.

(
  function() {
    let name = "Digital Innovation One"
    return name;
  }
)();

// Digital Innovation One


Também pode ser utilizada com parâmetros ou armazenada em uma variável.

(
  function(a, b) {
    return a + b;
  }
)(1, 2);

// 3

const soma3 = (
  function() {
    return a + b;
  }
)(1, 2);

console.log(soma3) // 3


Callbacks

É uma função passada como argumento para outra.

Utilizando callbacks, você tem maior controle da ordem de chamadas.

const calc = function(operacao, num1, num2){
  return operacao(num1, num2);
}

const soma = function(num1, num2) {
  return num1 + num2;
}

const sub = function(num1, num2) {
  return num1 - num2;
}

const resultSoma = calc(soma, 1, 2);
const resultSub = calc(sub, 1, 2);

console.log(resultSub); // -1
console.log(resultSoma); // 3

-----------------------------------------------------------------------------------------------------------------------

Valores Padrão de parâmetro


Pré-ES2015:

function exponencial(array, num) {
  if (num === undefined) {
    num = 1;
  }

  const result = [];

  for(let i = 0; i < array.length; i++) {
    result.push(array[i] ** num);
  }

  return result;
}

exponencial([1, 2, 3, 4])
// [1, 2, 3, 4]

exponencial([1, 2, 3, 4], 4)
// [1, 8, 27, 64]



Pós-ES2015:

function exponencial(array, num = 1) {
  const result = [];

  for(let i = 0; i < array.length; i++) {
    result.push(array[i] ** num);
  }

  return result;
}

exponencial([1, 2, 3, 4])
// [1, 2, 3, 4]

exponencial([1, 2, 3, 4], 4)
// [1, 8, 27, 64]



Objeto "arguments"

É um array com todos os parâmetros passados quando a função foi invocada.

function findMax() {
  let max = -Infinity;

  for(let i = 0; i < arguments.length; i++) {
    if (arguments[i] > max) {
      max = arguments[i];
    }
   }

   return max;
}

> findMax(1, 2, 3, 6, 90, 1)
<- 90


function showArgs() {
  return arguments;
}

> showArgs(1, 2, [2,3,4], "string")
<- Arguments(4) [1, 2, Array(3), "string", callee: f, Symbol(Symbol.iter
   ator): f]
     0: 1
     1: 2
    >2: (3) [2, 3, 4]
     3: "string"
    >callee: f showArgs()
     length: 4
    >Symbol(Symbol.iterator): f values()
    >__proto__: Object

--------------------------------------------------------------------------------------------------------------------------

Arrays e objetos

Spread: uma forma de lidar separadamente com elementos. A sintaxe é utilizar "..." em frente ao nome da variável.

O que era parte de um array se torna um elemento independente.

function sum(x, y, z) {
  return x + y + z;
}

const numbers = [1, 2, 3];

console.log(sum(...numbers));


Rest: combina os argumentos em um array. Faz o inverso do spread.

O que era um elemento independente se torna parte de um array.

function confereTamanho(...args) {
  console.log(args.length)
}

confereTamanho() // 0
confereTamanho(1, 2) // 2
confereTamanho(3, 4, 5) // 3


Objetos

Object Destructuring

Entre chaves {}, podemos filtrar apenas os dados que nos interessam em um objeto.

const user = {
  id: 42,
  displayName: 'jdoe',
  fullName: {
    firstName: 'John',
    lastName: 'Doe'
  }
};

function userId({id}) {
  return id;
}

function getFullName({fullName: {firstName: first, lastName: last}}) {
  return `${first} ${last}`;
}

userId(user)
// 42

getFullName(user)
// John Doe

---------------------------------------------------------------------------------------------------------------------

Loops

If/else

function numeroPositivo(num) {
  let resultado;

  if(num < 0) {
    resultado = false;
  } else {
    resultado = true;
  }

  return resultado;
}

 numeroPositivo(2)
// true

numeroPositivo(-9)
// false


Javascript não tem elseif, as palavras sempre estão espaçadas!

function numeroPositivo(num) {
  const ehNegativo = num < 0;
  const maiorQueDez = num > 10;

  if(ehNegativo) {
    return "Esse número é negativo!";
  } else if (!ehNegativo && maiorQueDez) {
    return "Esse número é positivo e maior que 10!"
  }

  return "Esse número é positivo!";
}



Switch/case

-Equivale a uma comparação de tipo e valor (===)
-Sempre precisa de um valor "default"
-Ideal para quando se precisa comparar muitos valores

function getAnimal(id) {
  switch(id) {
    case 1:
      return "cão";
    case 2:
      return "gato";
    case 3:
      return "pássaro";
    default:
      return "peixe";
  }
} 



FOR

Loop dentro de elementos iteráveis (arrays, strings).

function multiplicaPorDois(arr) {
  let multiplicados = [];

  for(let i = 0; i < arr.length; i++) {
    multiplicados.push(arr[i] * 2);
  }
  
  return multiplicados;
}

const meusNumeros = [2, 33, 456, 356, 40];

multiplicaPorDois(meusNumeros);
// [4, 66, 912, 712, 80]


For...in

Loop entre propriedades enumeráveis de um objeto.

function forInExemplo(obj) {
  for(prop in obj) {
    console.log(prop);
  }
}

const meuObjeto = {
  nome: "João",
  idade: "20",
  cidade: "Salvador"
}

forInExemplo(meuObjeto);
// nome
// idade
// cidade



function forInExemplo(obj) {
  for(prop in obj) {
    console.log(obj[prop]);
  }
}

const meuObjeto = {
  nome: "João",
  idade: "20",
  cidade: "Salvador"
}

forInExemplo(meuObjeto);
// João
// 20
// Salvador



While

Executa instruções até que a condição se torne falsa.

function exemploWhile() {
  let num = 0

  while(num <= 5){
    console.log(num);
    num++;
  }
}

exemploWhile()
// 0
// 1
// 2
// 3
// 4
// 5

---------------------------------------------------------------------------------------------------------------------

THIS

A palavra reservada this é uma referência de contexto.
No exemplo, this refere-se ao objeto pessoa.

const pessoa = {
  firstName: "André",
  lastName: "Soares",
  id       : 1,
  fullName: function() {
    return this.firstName + " " + this.lastName;
  },
  getId: function() {
    return this.id;]
  }
};

pessoa.fullName();
// "André Soares"

pessoa.getId();
// 1